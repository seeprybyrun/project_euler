/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>
#include <cmath>
#include <cstdlib>
#include <cstring>

using namespace std;

int main ()
{
    const int TARGET = 500;

    int n = 1;

    while( true )
    {
        // (1) generate triangular numbers
        // T_n = \sum_{k=1}^n k = n(n+1)/2
        uint64_t T_n = n*(n+1)/2;
        uint64_t S = floor(sqrt(T_n));

        // (2) check number of divisors
        // for each integer j from 1 up to sqrt(T_n)
        //   if j divides T_n, the number of divisors increases by 2
        //   (unless j = sqrt(T_n), in which case we only add 1 divisor)
        uint64_t num_divisors = (S*S==T_n?-1:0);
        for( int j = 1; j <= S; j++ )
        {
            if( T_n % j == 0 ) num_divisors += 2;
        }

        if( num_divisors > TARGET )
        {
            cout << T_n << endl;
            break;
        }
        else ++n;

        //   but this can never happen, as shown below:
        // is T_n ever a perfect square (except for the case T_1 = 1)?
        // n(n+1)/2 = n^2/2 + n/2 < n^2 when n + 1 < 2n, i.e. when n > 1
        // suppose (n-k)^2 = n^2 - 2nk + k^2 = (n^2+n)/2, k >= 0
        // then 2n^2 - 4nk + 2k^2 = n^2 + n
        // n^2 - (4k+1)n + 2k^2 = 0
        // roots: (4k+1 +- sqrt(8k^2 + 8k + 1)) / 2
        // is 8k^2+8k+1 ever a perfect square (for k > 0)?
        // suppose 8k^2 + 8k + 1 = a^2
        // then 8k^2 + 8k + (1-a^2) = 0
        // so k = (-8 +- sqrt(64 - 32*(1-a^2)))/2
        // we need the radical (32*(1+a^2)) to be a perfect square
        // So (1+a^2) = 2^(odd power) * perfect square
    }

    return 0;
}

// EOF
